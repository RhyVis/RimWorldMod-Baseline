<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rhynia.Baseline</name>
    </assembly>
    <members>
        <member name="T:Rhynia.Baseline.ITab_ConfigureThing`1">
            <summary>
            Base class for tabs that configure a specific Thing properties.
            </summary>
        </member>
        <member name="T:Rhynia.Baseline.Util.AtomicContainer`1">
            <summary>
            A thread-safe container for a single value.
            </summary>
            <typeparam name="T">Type of the class</typeparam>
            <param name="initialValue">Initial stored value</param>
        </member>
        <member name="M:Rhynia.Baseline.Util.AtomicContainer`1.#ctor(`0)">
            <summary>
            A thread-safe container for a single value.
            </summary>
            <typeparam name="T">Type of the class</typeparam>
            <param name="initialValue">Initial stored value</param>
        </member>
        <member name="P:Rhynia.Baseline.Util.AtomicContainer`1.Value">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.AtomicContainer`1.Access``1(System.Func{`0,``0})">
            <summary>
            Safely accesses the current value, allowing for thread-safe read operations.
            <br />
            Note: This method only guarantees that the reference to the object is read atomically.
            It does not protect the object itself from being modified by other threads during the execution of the accessor.
            If the object of type T is mutable, it must be internally thread-safe.
            </summary>
            <typeparam name="TResult">The type of the result from the function.</typeparam>
            <param name="accessor">The function to execute on the value.</param>
            <returns>The result from the accessor function.</returns>
        </member>
        <member name="M:Rhynia.Baseline.Util.AtomicContainer`1.SynchronizedAction(System.Action{`0})">
            <summary>
            Executes a synchronized action on the contained value, providing thread-safe access for mutable objects.
            This method uses a lock to ensure that no other synchronized action can run concurrently.
            </summary>
            <param name="action">The action to perform on the value.</param>
        </member>
        <member name="M:Rhynia.Baseline.Util.AtomicContainer`1.SynchronizedAction``1(System.Func{`0,``0})">
            <summary>
            Executes a synchronized function on the contained value, providing thread-safe access for mutable objects and returning a result.
            This method uses a lock to ensure that no other synchronized action can run concurrently.
            </summary>
            <typeparam name="TResult">The type of the result from the function.</typeparam>
            <param name="accessor">The function to execute on the value.</param>
            <returns>The result from the accessor function.</returns>
        </member>
        <member name="T:Rhynia.Baseline.Util.AtomicContainerNullable`1">
            <summary>
            Similar to <see cref="T:Rhynia.Baseline.Util.AtomicContainer`1"/>, but allows for null values.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.AtomicContainerNullable`1.#ctor(`0)">
            <summary>
            Similar to <see cref="T:Rhynia.Baseline.Util.AtomicContainer`1"/>, but allows for null values.
            </summary>
        </member>
        <member name="P:Rhynia.Baseline.Util.AtomicContainerNullable`1.Value">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.AtomicContainerNullable`1.Access``1(System.Func{`0,``0})">
            <summary>
            Safely accesses the current value, allowing for thread-safe read operations.
            <br />
            Note: This method only guarantees that the reference to the object is read atomically.
            It does not protect the object itself from being modified by other threads during the execution of the accessor.
            If the object of type T is mutable, it must be internally thread-safe.
            </summary>
            <typeparam name="TResult">The type of the result from the function.</typeparam>
            <param name="accessor">The function to execute on the value.</param>
            <returns>The result from the accessor function, or default if the contained value is null.</returns>
        </member>
        <member name="M:Rhynia.Baseline.Util.AtomicContainerNullable`1.SynchronizedAction(System.Action{`0})">
            <summary>
            Executes a synchronized action on the contained value, providing thread-safe access for mutable objects.
            This method uses a lock to ensure that no other synchronized action can run concurrently.
            </summary>
            <param name="action">The action to perform on the value.</param>
        </member>
        <member name="M:Rhynia.Baseline.Util.AtomicContainerNullable`1.SynchronizedAction``1(System.Func{`0,``0})">
            <summary>
            Executes a synchronized function on the contained value, providing thread-safe access for mutable objects and returning a result.
            This method uses a lock to ensure that no other synchronized action can run concurrently.
            </summary>
            <typeparam name="TResult">The type of the result from the function.</typeparam>
            <param name="accessor">The function to execute on the value.</param>
            <returns>The result from the accessor function.</returns>
        </member>
        <member name="T:Rhynia.Baseline.Util.AtomicBool">
            <summary>
            A thread-safe boolean container.
            </summary>
            <param name="initialValue">Initial stored value, defaults to false</param>
        </member>
        <member name="M:Rhynia.Baseline.Util.AtomicBool.#ctor(System.Boolean)">
            <summary>
            A thread-safe boolean container.
            </summary>
            <param name="initialValue">Initial stored value, defaults to false</param>
        </member>
        <member name="P:Rhynia.Baseline.Util.AtomicBool.Value">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.DictionaryExtension.GetOrAddDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Gets the value associated with the specified key, or adds a default value if the key is not present.
            </summary>
            <returns>The value associated with the specified key, or a new default value if the key is not present.</returns>
        </member>
        <member name="M:Rhynia.Baseline.Util.DictionaryExtension.GetOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Gets the value associated with the specified key, or adds a new value if the key is not present.
            </summary>
            <returns>The value associated with the specified key, or a new value if the key is not present.</returns>
        </member>
        <member name="T:Rhynia.Baseline.Util.HarmonyExtension">
            <summary>
            Extension methods for Harmony.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.HarmonyExtension.AsCodeMatcher(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction})">
            <summary>
            Directly convert IEnumerable of CodeInstruction to CodeMatcher
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.ObjectExtension.NotEqualToAnyOf(System.Object,System.Object[])">
            <summary>
            Checks if the object is not equal to any of the provided values.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.ObjectExtension.NotEqualToAllOf(System.Object,System.Object[])">
            <summary>
            Checks if the object is not equal to all of the provided values.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.ObjectExtension.ToStringOrNull(System.Object)">
            <summary>
            Converts the object to its string representation or returns "[NULL]" if it's null.
            Used in checking logging.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.PawnExtension.ApplyHediff(Verse.Pawn,Verse.HediffDef,System.Single)">
            <summary>
            Applies a hediff to the pawn.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.PawnExtension.ApplyHediffWithStat(Verse.Pawn,Verse.HediffDef,System.Collections.Generic.List{RimWorld.StatDef},System.Single)">
            <summary>
            Applies a hediff to the pawn with the specified stats and severity adjustment.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.PawnExtension.RemoveHediff(Verse.Pawn,Verse.HediffDef)">
            <summary>
            Removes a hediff from the pawn.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.PawnExtension.HasHediff(Verse.Pawn,Verse.HediffDef)">
            <summary>
            Checks if the pawn has a specific hediff.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.PawnExtension.DamageBodyPart(Verse.Pawn,Verse.BodyPartRecord,Verse.DamageDef,System.Single,System.Single)">
            <summary>
            Damages a specific body part of the pawn.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.PawnExtension.DamageRandomBodyPart(Verse.Pawn,System.Single)">
            <summary>
            Damages a random body part of the pawn.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.PawnExtension.IsManagedColonist(Verse.Pawn)">
            <summary>
            Checks if the pawn is a normal colonist.
            <br />
            Using <see cref="P:Verse.Pawn.IsColonist"/>, <see cref="P:Verse.Pawn.IsSlaveOfColony"/> and <see cref="P:Verse.Pawn.IsPrisonerOfColony"/>.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.PawnExtension.SpawnToThing(Verse.Pawn,Verse.Thing)">
            <summary>
            Spawn the pawn at the position of the thing.
            </summary>
        </member>
        <member name="T:Rhynia.Baseline.Util.ReflectionExtension">
            <summary>
            A quick approach to access instance's fields and properties using reflection.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.RoomExtension.ThingGrid(Verse.Room)">
            <summary>
            Gets all the things in the room's ThingGrid.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.SkillExtension.DepleteSkillLevel(RimWorld.SkillRecord,System.Single)">
            <summary>
            Depletes the skill level by the specified amount of experience points.
            <br />
            If the skill level is already at 0 or the experience points are less than or equal to 0,
            the method returns false without making any changes.
            <br />
            If the skill level is greater than 0, it reduces the level and adjusts the
            experience points accordingly. If the level reaches 0, it resets the experience points to 0.
            <br />
            This method avoids using the <see cref="M:RimWorld.SkillRecord.Learn(System.Single,System.Boolean,System.Boolean)"/> method.
            </summary>
            <returns>True if the skill level was successfully decremented, otherwise false.</returns>
        </member>
        <member name="M:Rhynia.Baseline.Util.StringExtension.ContainsIgnoreCase(System.String,System.String)">
            <summary>
            Checks if the string contains the target string, ignoring case.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.StringExtension.ContainsAnyOfIgnoreCase(System.String,System.String[])">
            <summary>
            Checks if the string contains any of the target strings, ignoring case.
            </summary>
        </member>
        <member name="T:Rhynia.Baseline.Util.ThingExtension">
            <summary>
            Extension methods for the <see cref="T:Verse.Thing"/> class.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.ThingExtension.FindPawnsInRange(Verse.Thing,System.Single)">
            <summary>
            Finds all pawns within a specified range of the given thing.
            <br/>
            The calculation is based on the squared distance.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.ThingExtension.FindPawnsAliveInRange(Verse.Thing,System.Single)">
            <summary>
            Similar to <see cref="M:Rhynia.Baseline.Util.ThingExtension.FindPawnsInRange(Verse.Thing,System.Single)"/>, but only returns pawns that are alive.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.ThingExtension.FindPawnsInRange(Verse.ThingComp,System.Single)">
            <summary>
            Based on <see cref="M:Rhynia.Baseline.Util.ThingExtension.FindPawnsInRange(Verse.Thing,System.Single)"/>.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.ThingExtension.FindPawnsAliveInRange(Verse.ThingComp,System.Single)">
            <summary>
            Based on <see cref="M:Rhynia.Baseline.Util.ThingExtension.FindPawnsAliveInRange(Verse.Thing,System.Single)"/>.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.ThingExtension.SetStackCount(Verse.Thing,System.Int32)">
            <summary>
            Sets the stack count of the thing.
            <br />
            If the count is less than or equal to zero, the thing is destroyed.
            If the count exceeds the stack limit, it is capped at the stack limit.
            If the thing is null, no action is taken.
            If the count is valid, it updates the stack count of the thing.
            </summary>
            <returns>The updated thing or null if it was destroyed or invalid.</returns>
        </member>
        <member name="M:Rhynia.Baseline.Util.ThingExtension.ThrowMote(Verse.Thing,System.String)">
            <summary>
            Throws a text mote at the thing's position.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.ThingExtension.ThrowMote(Verse.ThingComp,System.String)">
            <summary>
            Throws a text mote at the comp's parent position.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.ThingExtension.SpawnAt(Verse.ThingDef,Verse.Map,Verse.IntVec3,System.Int32)">
            <summary>
            Spawns a thing at the specified position in the given map.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.ThingExtension.HasDesignation(Verse.Thing,Verse.DesignationDef)">
            <summary>
            Checks if the thing has a specific designation.
            </summary>
            <param name="thing">The thing to check.</param>
            <param name="def">The designation definition to check for.</param>
            <returns>True if the thing has the designation, false otherwise.</returns>
        </member>
        <member name="M:Rhynia.Baseline.Util.ThingExtension.AddDesignation(Verse.Thing,Verse.DesignationDef)">
            <summary>
            Adds a designation to the thing.
            </summary>
            <param name="thing">The thing to add the designation to.</param>
            <param name="def">The designation definition to add.</param>
        </member>
        <member name="M:Rhynia.Baseline.Util.ThingExtension.RemoveDesignation(Verse.Thing,Verse.DesignationDef)">
            <summary>
            Removes a designation from the thing.
            </summary>
            <param name="thing">The thing to remove the designation from.</param>
            <param name="def">The designation definition to remove.</param>
        </member>
        <member name="T:Rhynia.Baseline.Util.TranslationExtension">
            <summary>
            Extension helper methods for translation.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.TranslationExtension.TranslateAsEnable(System.Boolean)">
            <summary>
            Translates the boolean value to a localized string for enable/disable.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.TranslationExtension.TranslateAsYes(System.Boolean)">
            <summary>
            Translates the boolean value to a localized string for yes/no.
            </summary>
        </member>
        <member name="T:Rhynia.Baseline.Util.LoggerLabelAttribute">
            <summary>
            Attribute to specify the log label, used by <see cref="T:Rhynia.Baseline.Util.Logger`1"/>.
            </summary>
            <param name="label">Label used for logging</param>
        </member>
        <member name="M:Rhynia.Baseline.Util.LoggerLabelAttribute.#ctor(System.String)">
            <summary>
            Attribute to specify the log label, used by <see cref="T:Rhynia.Baseline.Util.Logger`1"/>.
            </summary>
            <param name="label">Label used for logging</param>
        </member>
        <member name="P:Rhynia.Baseline.Util.LoggerLabelAttribute.Label">
            <summary>
            Label used for logging.
            </summary>
        </member>
        <member name="T:Rhynia.Baseline.Util.Logger`1">
            <summary>
            Generic static logger template class. If <see cref="T:Rhynia.Baseline.Util.LoggerLabelAttribute"/> not provided, the type name will be used.
            </summary>
            <typeparam name="T">Class or struct type, using <see cref="T:Rhynia.Baseline.Util.LoggerLabelAttribute"/> to specify the log label.</typeparam>
        </member>
        <member name="M:Rhynia.Baseline.Util.Logger`1.Debug(System.String)">
            <summary>
            Logs a debug message.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.Logger`1.Info(System.String)">
            <summary>
            Logs an informational message.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.Logger`1.Warn(System.String)">
            <summary>
            Logs a warning message.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.Logger`1.Error(System.String)">
            <summary>
            Logs an error message.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.Logger`1.Debug(System.String,System.Object)">
            <summary>
            Logs a debug message.
            <param name="message">The message to log</param>
            <param name="o">An optional object to include in the log</param>
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.Logger`1.Info(System.String,System.Object)">
            <summary>
            Logs an informational message.
            <param name="message">The message to log</param>
            <param name="o">An optional object to include in the log</param>
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.Logger`1.Warn(System.String,System.Object)">
            <summary>
            Logs a warning message.
            <param name="message">The message to log</param>
            <param name="o">An optional object to include in the log</param>
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.Logger`1.Error(System.String,System.Object)">
            <summary>
            Logs an error message.
            <param name="message">The message to log</param>
            <param name="o">An optional object to include in the log</param>
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.Logger`1.I_Debug(System.String,System.String)">
            <summary>
            Logs a debug message.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.Logger`1.I_Info(System.String,System.String)">
            <summary>
            Logs an informational message.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.Logger`1.I_Warn(System.String,System.String)">
            <summary>
            Logs a warning message.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.Logger`1.I_Error(System.String,System.String)">
            <summary>
            Logs an error message.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.ModUtil.IsModActive(System.String)">
            <summary>
            Checks if a mod with the given modId is active.
            <br/>
            Twice checks ModsConfig and ModLister to ensure local mods compatibility.
            </summary>
        </member>
        <member name="T:Rhynia.Baseline.Util.PatchBase">
            <summary>
            A base class for collecting patches to be applied via Harmony.
            </summary>
        </member>
        <member name="P:Rhynia.Baseline.Util.PatchBase.Name">
            <summary>
            The name of the patch collection.
            </summary>
        </member>
        <member name="P:Rhynia.Baseline.Util.PatchBase.ModId">
            <summary>
            The mod ID that this patch collection is associated with.
            </summary>
        </member>
        <member name="P:Rhynia.Baseline.Util.PatchBase.LogLabel">
            <summary>
            The log label used for logging messages related to this patch collection.
            </summary>
        </member>
        <member name="P:Rhynia.Baseline.Util.PatchBase.PatchProviders">
            <summary>
            A collection of patch providers that define the patches to be applied.
            </summary>
        </member>
        <member name="P:Rhynia.Baseline.Util.PatchBase.ShouldApply">
            <summary>
            Determines whether all patches should be applied based on the mod's active status.
            <br />
            This check is performed before applying any patches.
            </summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.PatchBase.Apply(HarmonyLib.Harmony)">
            <summary>
            Applies all patches defined in the PatchProviders collection using the provided Harmony instance.
            </summary>
        </member>
        <member name="T:Rhynia.Baseline.Util.PatchProvider">
            <summary>
            A record representing a patch provider with necessary details for applying a Harmony patch.
            </summary>
            <param name="Name">Name of the patch provider.</param>
            <param name="ShouldApply">A function that determines whether the patch should be applied.</param>
            <param name="TargetMethodProvider">A function that provides the target method for the patch.</param>
            <param name="PatchMethodProvider">A function that provides the patch method.</param>
            <param name="Type">The type of the patch.</param>
            <param name="LatePatch">Whether the patch should be applied late (after initialization).</param>
            <param name="LatePatchAsync">Whether the late patch should be applied asynchronously.</param>
        </member>
        <member name="M:Rhynia.Baseline.Util.PatchProvider.#ctor(System.String,System.Func{System.Boolean},System.Func{System.Reflection.MethodBase},System.Func{HarmonyLib.HarmonyMethod},HarmonyLib.HarmonyPatchType,System.Boolean,System.Boolean)">
            <summary>
            A record representing a patch provider with necessary details for applying a Harmony patch.
            </summary>
            <param name="Name">Name of the patch provider.</param>
            <param name="ShouldApply">A function that determines whether the patch should be applied.</param>
            <param name="TargetMethodProvider">A function that provides the target method for the patch.</param>
            <param name="PatchMethodProvider">A function that provides the patch method.</param>
            <param name="Type">The type of the patch.</param>
            <param name="LatePatch">Whether the patch should be applied late (after initialization).</param>
            <param name="LatePatchAsync">Whether the late patch should be applied asynchronously.</param>
        </member>
        <member name="P:Rhynia.Baseline.Util.PatchProvider.Name">
            <summary>Name of the patch provider.</summary>
        </member>
        <member name="P:Rhynia.Baseline.Util.PatchProvider.ShouldApply">
            <summary>A function that determines whether the patch should be applied.</summary>
        </member>
        <member name="P:Rhynia.Baseline.Util.PatchProvider.TargetMethodProvider">
            <summary>A function that provides the target method for the patch.</summary>
        </member>
        <member name="P:Rhynia.Baseline.Util.PatchProvider.PatchMethodProvider">
            <summary>A function that provides the patch method.</summary>
        </member>
        <member name="P:Rhynia.Baseline.Util.PatchProvider.Type">
            <summary>The type of the patch.</summary>
        </member>
        <member name="P:Rhynia.Baseline.Util.PatchProvider.LatePatch">
            <summary>Whether the patch should be applied late (after initialization).</summary>
        </member>
        <member name="P:Rhynia.Baseline.Util.PatchProvider.LatePatchAsync">
            <summary>Whether the late patch should be applied asynchronously.</summary>
        </member>
        <member name="M:Rhynia.Baseline.Util.PatchBaseExtensions.Apply``1(HarmonyLib.Harmony)">
            <summary>
            Applies the patches defined in the specified PatchBase-derived class using the provided Harmony instance.
            </summary>
        </member>
        <member name="T:Rhynia.Baseline.Util.TimingScope">
            <summary>
            A scope for measuring the duration of an operation.
            <br />
            It will log the duration of the operation when disposed.
            </summary>
            <param name="action">The logger action to exec when disposed</param>
        </member>
        <member name="M:Rhynia.Baseline.Util.TimingScope.#ctor(System.Action{System.TimeSpan})">
            <summary>
            A scope for measuring the duration of an operation.
            <br />
            It will log the duration of the operation when disposed.
            </summary>
            <param name="action">The logger action to exec when disposed</param>
        </member>
        <member name="M:Rhynia.Baseline.Util.TimingScope.Start(System.Action{System.TimeSpan})">
            <summary>
            Starts a new timing scope.
            </summary>
            <param name="action">The logger action to exec when disposed</param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute">
            <summary>
            Indicates that the specified method parameter expects a constant.
            </summary>
            <remarks>
            This can be used to inform tooling that a constant should be used as an argument for the annotated parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Min">
            <summary>
            Indicates the minimum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Max">
            <summary>
            Indicates the maximum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="T:System.ReadOnlySpan`1"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute"/> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized, lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ParamCollectionAttribute">
            <summary>
            Indicates that a method will allow a variable number of arguments in its invocation.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresLocationAttribute">
            <summary>
            Reserved for use by a compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
    </members>
</doc>
